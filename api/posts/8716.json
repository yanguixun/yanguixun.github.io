{"title":"HTTP 是什么？","slug":"HTTP是什么？","date":"2020-04-10","updated":"2020-04-10","comments":true,"path":"api/posts/8716.json","excerpt":"<p>HTTP 是客户端和服务端之间互动需要准守的其中一种协议。在日常上网过程中，用户通过浏览器浏览目标网站的操作，看起来就是进入目标网站的门户之后，想看哪里就点哪里，但是实际上客户端和服务端之间的数据互动都是通过一套标准来执行的。用旧时代的眼光来看就是网络节点两边统一使用了莫斯代码，所以两边之间的交流就没有了障碍。</p>","cover":"/gallery/http-request-format.png","covers":["/gallery/http-request-format.png","/gallery/http-request-example.jpg","/gallery/http-response-format.png","/gallery/http-response-example.jpg"],"content":"<p>HTTP 是客户端和服务端之间互动需要准守的其中一种协议。在日常上网过程中，用户通过浏览器浏览目标网站的操作，看起来就是进入目标网站的门户之后，想看哪里就点哪里，但是实际上客户端和服务端之间的数据互动都是通过一套标准来执行的。用旧时代的眼光来看就是网络节点两边统一使用了莫斯代码，所以两边之间的交流就没有了障碍。</p>\n<a id=\"more\"></a>\n<p><strong> 先来个更好的文章做参考：<a href=\"//www.cnblogs.com/an-wen/p/11180076.html\" target=\"_blank\" rel=\"noopener\">HTTP 协议超级详解 </a></strong></p>\n<h1 id=\"HTTP-1-1\"><a class=\"headerlink\" href=\"#HTTP-1-1\"></a>HTTP/1.1</h1>\n<p>HTTP 属于 TCP/IP 中的“顶层”应用层，这说明 HTTP 的包装是数据出发前的第一步。在这里不谈 TCP 相关连接过程，但是 HTTP 请求 / 响应都是要在连接之后的事；想看的话，可以看 <a href=\"//www.cnblogs.com/kaleidoscope/p/9701117.html\" target=\"_blank\" rel=\"noopener\">TCP 三次握手详解及释放连接过程 </a>。基本上 HTTP 就是请求和响应的模式，在服务方想理你客户方的情况下，你想要什么，她都会回应你。</p>\n<p>HTTP 请求方法：</p>\n<ul>\n<li>GET，一般请求的数据都是不需要处理的数据 </li>\n<li>HEAD，获取 metadata，打个比方就是电脑上文件右键属性 </li>\n<li>POST，一般请求的数据都是需要处理的数据 </li>\n<li>PUT，像数据库的 INSERT</li>\n<li>DELETE，像数据库的 DELETE</li>\n<li>PATCH，像数据库的 UPDATE</li>\n<li> 还有 TRACE、OPTIONS、CONNECT</li>\n</ul>\n<p>HTTP 状态码：</p>\n<ul>\n<li>100 及以上，普通的信息代码 </li>\n<li>200 及以上，请求成功被处理 </li>\n<li>300 及以上，请求被重定向了 </li>\n<li>400 及以上，这是客户放的错 </li>\n<li>500 及以上，这是服务方的错 </li>\n</ul>\n<h2 id=\"HTTP 请求 - 响应报文结构\"><a class=\"headerlink\" href=\"#HTTP 请求 - 响应报文结构\"></a>HTTP 请求 / 响应报文结构 </h2>\n<p><img src=\"/gallery/http-request-format.png\" alt=\"HTTP 请求报文结构\"><em>Image from: <a href=\"//www.cnblogs.com/an-wen/p/11180076.html\" target=\"_blank\" rel=\"noopener\">HTTP 协议超级详解 </a></em></p>\n<p><img src=\"/gallery/http-request-example.jpg\" alt=\"HTTP 请求报文例子\"><em>Image from: <a href=\"//www.cnblogs.com/an-wen/p/11180076.html\" target=\"_blank\" rel=\"noopener\">HTTP 协议超级详解 </a></em></p>\n<p><img src=\"/gallery/http-response-format.png\" alt=\"HTTP 响应报文结构\"><em>Image from: <a href=\"//www.cnblogs.com/an-wen/p/11180076.html\" target=\"_blank\" rel=\"noopener\">HTTP 协议超级详解 </a></em></p>\n<p><img src=\"/gallery/http-response-example.jpg\" alt=\"HTTP 响应报文例子\"><em>Image from: <a href=\"//www.cnblogs.com/an-wen/p/11180076.html\" target=\"_blank\" rel=\"noopener\">HTTP 协议超级详解 </a></em></p>\n<h2 id=\"比较 HTTP-1-1 和 HTTP-2\"><a class=\"headerlink\" href=\"# 比较 HTTP-1-1 和 HTTP-2\"></a> 比较 HTTP/1.1 和 HTTP/2</h2>\n<ul>\n<li>HTTP/2 在一次 TCP 连接中可以同时发送多个请求，多行程减少了连接次数和响应的等待时间 </li>\n<li>HTTP/2 压缩头部信息，包裹更小，运输更方便 </li>\n<li>HTTP/2 使用二进制协议，不仅节省了不少分隔符和封箱胶带，还可以分成小份包装以数据流形式发送 </li>\n<li>HTTP/2 允许服务端推送，一次请求把相关依赖的脚本也给客户端一起发来，很人性化 </li>\n</ul>\n<h1 id=\"HTTPS\"><a class=\"headerlink\" href=\"#HTTPS\"></a>HTTPS</h1>\n<p> 在 HTTP 包装外再来个 SSL/TLS 加密包装，HTTPS 有以下特点：</p>\n<ol>\n<li> 内容加密，传输过程中使用的密文 </li>\n<li> 验证身份，找到对的服务端 </li>\n<li> 保护数据完整性，防止传输过程中被动手脚 </li>\n</ol>\n<p> 基本上传输中的数据不易被动手脚。</p>\n<p><strong><em> 更多可以百度 HTTP、HTTPS、TCP 连接等。</em></strong></p>\n","url":"/posts/8716/","min2read":2,"word4post":700,"prev_post":{"title":"Hexo 主题 Mustom 使用指南","url":"/posts/49651/"},"next_post":{"title":"TCP/IP 是什么？","url":"/posts/4785/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"HTTP-1-1\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">HTTP&#x2F;1.1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"HTTP 请求 - 响应报文结构\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\">HTTP 请求 &#x2F; 响应报文结构 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"比较 HTTP-1-1 和 HTTP-2\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\"> 比较 HTTP&#x2F;1.1 和 HTTP&#x2F;2</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"HTTPS\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">HTTPS</span></a></li></ol>","categories":[{"name":"Networking","path":"api/categories/Networking.json","url":"/categories/Networking/"}],"tags":[{"name":"HTTP","path":"api/tags/HTTP.json","url":"/tags/HTTP/"},{"name":"HTTPS","path":"api/tags/HTTPS.json","url":"/tags/HTTPS/"}]}